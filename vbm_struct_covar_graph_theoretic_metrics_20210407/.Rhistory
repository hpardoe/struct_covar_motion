source("threshold2Density.R")
mypal <- brewer.pal("Set2", n = 3)
aal_gm.df <- read.csv("gm_table_aal_run01_and_02_20210305.csv", stringsAsFactors=FALSE)
for (i in 1:dim(aal_gm.df)[1]) {
  myfile <- strsplit(aal_gm.df$fileNames[i], split = "/")[[1]][3]
  aal_gm.df$run[i] <- strsplit(myfile, split = "_")[[1]][4]
  aal_gm.df$subject[i] <- strsplit(myfile, split = "_")[[1]][1]
}
aal_gm.df$run <- as.factor(aal_gm.df$run)
aal_gm.df$subject <- as.factor(aal_gm.df$subject)
resample_df <- function(input_df = aal_gm.df, nrows_out = 20, n_motion = 0) {
  nomotion_indices <- which(input_df$run == "run-01")
  motion_indices <- which(input_df$run == "run-02")
  motion_sample <- sample(motion_indices,n_motion, replace=TRUE)
  nomotion_sample <- sample(nomotion_indices, (nrows_out - n_motion) , replace=TRUE)
  input_df[c(motion_sample,nomotion_sample),]
}
calc_cor <- function(input_df = temp) {
  mymatrix <- as.matrix(input_df[,1:90])
  mycor_matrix <- cor(mymatrix)
  mycor_vector <- as.vector(mycor_matrix[ upper.tri(mycor_matrix)])
  list(cor_matrix = mycor_matrix, cor_vector = mycor_vector)
}
ls()
temp.df <- resample_df(nrows_out=29, n_motion=0)
head(temp.df)
tempCor <- calc_cor(temp.df)
head(tempCor)
ls()
q()
source("threshold2Density.R")
tempCor <- calc_cor(temp.df)
threshold <- density2Threshold(tempCor$cor_matrix, density = 0.1)
threshold
temp_adj_matrix <- tempCor$cor_matrix > threshold
tempAdjGraph <- graph_from_adjacency_matrix(temp_adj_matrix, mode = "undirected", weighted=NULL)
modularity(tempAdjGraph)
?modularity
myCommunity <- cluster_fast_greedy(tempAdjGraph)
myCommunity
modularity(tempAdjGraph, myCommunity)
?modularity
modularity(myCommunity)
str(myCommunity)
myCommunity$modularity
max(myCommunity$modularity)
history()
aal_gm.df[ aal_gm.df$run == "run-01", ]
temp.df <- aal_gm.df[ aal_gm.df$run == "run-01", ]
source("source_me_graph_theoretic_measures_20210407.R")
source("source_me_graph_theoretic_measures_20210407.R")
transitivity(tempAdjGraph)
history()
myCommunity <- cluster_fast_greedy(tempAdjGraph)
modularity(myCommunity)
library(brainGraph)
efficiency(tempAdjGraph)
efficiency(tempAdjGraph, type = "global")
?smallworld
source("source_me_graph_theoretic_measures_20210407.R")
source("source_me_graph_theoretic_measures_20210407.R")
smallworldIndex(tempAdjGraph)$index
source("source_me_graph_theoretic_measures_20210407.R")
?array
?array
source("source_me_graph_theoretic_measures_20210407.R")
graph_theoretic_array
colMeans(graph_theoretic_array[,,1,1])
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,2]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,3]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,4]))
source("source_me_graph_theoretic_measures_20210407.R")
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,2,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,3,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,4,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]))
q()
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,2]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,3]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,4]))
source("source_me_graph_theoretic_measures_20210407.R")
warnings()
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,2,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,3,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,4,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,2,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,3,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]), ylim = c(0.62,0.66))
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]), ylim = c(0.62,0.66), col = "red")
plot(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,1,1]), ylim = c(0.62,0.66), col = "red", type = "l")
points(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,2,1]), col = "blue", type = "l")
points(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,3,1]), col = "green", type = "l")
points(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,3,1], na.rm=TRUE), col = "green", type = "l")
?par
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
plot(x = nMotion_affected,
  y = colMeans(graph_theoretic_array[,,1,2]),
  col = "red",
  type = "l",
  ylab = "Modularity")
points(x = nMotion_affected, y = colMeans(graph_theoretic_array[,,2,2]), col = "blue", type = "l")
colMeans(graph_theoretic_array[,,2,2])
colMeans(graph_theoretic_array[,,3,2])
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
colMeans(graph_theoretic_array[,,1,3])
colMeans(graph_theoretic_array[,,2,3])
colMeans(graph_theoretic_array[,,3,3])
source("source_me_plot_gt_metrics_20210407.R")
colMeans(graph_theoretic_array[,,1,4])
colMeans(graph_theoretic_array[,,2,4])
colMeans(graph_theoretic_array[,,3,4])
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_graph_theoretic_measures_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_single_density_gt_metrics_20210407.R")
source("source_me_plot_single_density_gt_metrics_20210407.R")
q()
source("source_me_plot_single_density_gt_metrics_20210407.R")
q()
nMotion_affected_percentage <- 100*(nMotion_affected/29)
q()
source("source_me_plot_single_density_gt_metrics_20210407.R")
source("source_me_plot_single_density_gt_metrics_20210407.R")
?par
source("source_me_plot_single_density_gt_metrics_20210407.R")
source("source_me_plot_single_density_gt_metrics_20210407.R")
source("source_me_plot_single_density_gt_metrics_20210407.R")
0.25*29
q()
?citation
citation()
q()
citation()
citation("igraph")
citation("braingraph")
citation("brainGraph")
citation("gqgraph")
citation("qgraph")
q()
head(temp.df)
names(temp.df)
q()
source("source_me_plot_gt_metrics_20210407.R")
q()
source("source_me_plot_gt_metrics_20210407.R")
source("source_me_plot_gt_metrics_20210421.R")
source("source_me_plot_gt_metrics_20210421.R")
source("source_me_plot_gt_metrics_20210421.R")
source("source_me_plot_gt_metrics_20210421.R")
source("source_me_plot_gt_metrics_20210421.R")
source("source_me_plot_single_density_gt_metrics_20210407.R")
q()
source("source_me_plot_gt_metrics_20210421.R")
source("source_me_plot_gt_metrics_20210421.R")
q()
source("source_me_plot_single_density_gt_metrics_20210407.R")
dim(graph_theoretic_array)

dim(graph_theoretic_array)
graph_theoretic_array[,1,2,1]
quantile(graph_theoretic_array[,1,2,1], probs = c(0.025, 0.975))
apply(graph_theoretic_array[,,2,1], MARGIN=1, FUN=quantile, probs = c(0.025, 0.975))
apply(graph_theoretic_array[,,2,1], MARGIN=2, FUN=quantile, probs = c(0.025, 0.975))
plot(x = nMotion_affected_percentage,
  y = colMeans(graph_theoretic_array[,,density_index,1], na.rm=TRUE),
  col = mypal[1],
  type = "l",
  ylab = "Transitivity/clustering coefficient",
  xlab = "Motion affected scans (%)",
  lwd = 2)
myConfInt <- apply(graph_theoretic_array[,,2,1], MARGIN=2, FUN=quantile, probs = c(0.025, 0.975))
myConfInt[1,]
points(x = nMotion_affected_percentage, y = myConfInt[1,])
points(x = nMotion_affected_percentage, y = myConfInt[2,])
plot(x = nMotion_affected_percentage, y = colMeans(graph_theoretic_array[,,density_index,1], na.rm=TRUE), ylim = c(0.5,0.72))
points(x = nMotion_affected_percentage, y = myConfInt[1,])
points(x = nMotion_affected_percentage, y = myConfInt[2,])
q()
